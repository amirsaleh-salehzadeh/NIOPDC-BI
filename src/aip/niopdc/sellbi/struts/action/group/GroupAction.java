/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package aip.niopdc.sellbi.struts.action.group;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import aip.common.AIPBaseDeleteParam;
import aip.common.AIPDefaultParam;
import aip.common.AIPException;
import aip.common.AIPWebUser;
import aip.common.security.group.GroupComboLST;
import aip.common.security.group.GroupDAOInterface;
import aip.common.security.group.GroupDTO;
import aip.common.security.group.GroupENT;
import aip.common.security.group.GroupLST;
import aip.common.security.group.GroupLSTParam;
import aip.common.security.group.RoleDTO;
import aip.common.security.group.SSASRoleDTO;
import aip.common.security.user.UserComboLST;
import aip.common.security.user.UserDAOInterface;
import aip.common.security.user.UserForSaveENT;
import aip.common.security.user.UserLST;
import aip.common.security.user.UserLSTParam;
import aip.niopdc.sellbi.orm.SellDAOManager;
import aip.niopdc.sellbi.struts.form.group.GroupForm;
import aip.util.AIPErrorHandler;
import aip.util.NVL;
import aip.util.UTF8;
import aip.util.os.AIPOSException;
import aip.util.os.AIPOSManager;

/** 
 * MyEclipse Struts
 * Creation date: 10-24-2009
 * 
 * XDoclet definition:
 * @struts.action path="/userGroup" name="userGroupForm" input="/form/group/userGroupList.jsp" scope="request" validate="true"
 */
public class GroupAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		GroupForm groupForm = (GroupForm) form;
		groupForm.setErrorMessage("");
		groupForm.setSuccessMessage("");
		ActionForward af = new ActionForward();
		String reqCode = request.getParameter("reqCode");
		String filter = request.getParameter("filter");
		
		if("deleteGroupUsers".equalsIgnoreCase(reqCode)){
			AIPDefaultParam param = new AIPDefaultParam();
			AIPWebUser webUser = new AIPWebUser();
			String[] usernames = request.getParameterValues("usernames");
			String groupId = request.getParameter("groupIdForDelete");
			for(int j = 0 ; j < usernames.length ; j ++){
				webUser.setRemoteUser(usernames[j]);
				param.setWebUser(webUser);
				UserForSaveENT forSaveENT = new UserForSaveENT();
				try {
					forSaveENT = getDAOForUsers().getUserForSaveENT(param);
				} catch (AIPException e) {
					e.printStackTrace();
				}
					String[] oldGroupIds = NVL.getString(forSaveENT.getUserGroupIds()).split(",");
					String newGroupIds ="";
					for (int i = 0 ; i < oldGroupIds.length ; i++){
						if(!oldGroupIds[i].equalsIgnoreCase(groupId)){
							newGroupIds = newGroupIds + oldGroupIds[i] + ",";
						}
					}
					forSaveENT.setUserGroupIds(newGroupIds);
					try {
						getDAOForUsers().saveUser(forSaveENT);
					} catch (AIPException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			}
			reqCode="list";
		} if("userList".equalsIgnoreCase(reqCode)){
			int groupId = NVL.getInt(request.getParameter("groupId"));
			UserLST userLST = new UserLST();
			UserLSTParam param = new UserLSTParam();
			param.setGroupId(groupId);
			try {
				userLST = getDAOForUsers().getUserLST(param);
			} catch (AIPException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				request.setAttribute("userList", userLST);
				request.setAttribute("param", param);
				af = mapping.findForward("userList");
		}else if ("".equalsIgnoreCase(reqCode) || reqCode == null || "list".equalsIgnoreCase(reqCode)){
			GroupLSTParam param = new GroupLSTParam();
			GroupLST groupLST = new GroupLST();
			param.setReqPage(NVL.getInt(request.getParameter("page"),0));
			if("list".equalsIgnoreCase(reqCode)){
				param.setFilter(filter);
			}
			try {
				groupLST = getDAO().getGroupLST(param);
			} catch (AIPException e) {
				e.printStackTrace();
			}
			request.setAttribute("param", param);
			request.setAttribute("groupLST", groupLST);			
			af = mapping.findForward("list");
		} else if ( "edit".equalsIgnoreCase(reqCode)){
			GroupDTO groupDTO = new GroupDTO(); 
			AIPDefaultParam param = new AIPDefaultParam();
			param.setId(NVL.getInt(request.getParameter("editId")));
			GroupComboLST groupComboLST = new GroupComboLST();
			AIPWebUser user = new AIPWebUser(request);
			try {
				groupDTO = getDAO().getGroupDTO(param);
				groupComboLST = getDAO().getGroupComboLST(user);
			} catch (AIPException e) {
				e.printStackTrace();
			}
			if (param.getId() == 0){
				GroupENT ent = new GroupENT();
				groupDTO.setEnt(ent);
			}
			request.setAttribute("comboLST", groupComboLST);
			request.setAttribute("groupDTO", groupDTO);
			af = mapping.findForward("edit");
		} else if ( "save".equalsIgnoreCase(reqCode) || "saveAndNew".equalsIgnoreCase(reqCode)){
			GroupDTO dto = new GroupDTO();
			GroupENT ent = new GroupENT();
			ent.setGroupName(UTF8.cnvUTF8(request.getParameter("ent.groupName")));
			if(NVL.getInt(request.getParameter("ent.id")) > 0){			
				ent.setId(NVL.getInt(request.getParameter("ent.id")));
			}
			dto.setSelectedRoleIds(request.getParameter("selectedRoles"));
			GroupComboLST groupComboLST = new GroupComboLST();
			AIPWebUser user = new AIPWebUser(request);
			String winUN = request.getParameter("ent.winGroup");
			if(winUN==null || "".equals(winUN)){
				String _winUN = "xmla_"+ent.getGroupName();
				try {
					AIPOSManager.getOS().addWinGroup(_winUN);
					winUN=_winUN;
				} catch (AIPOSException e) {
					e.printStackTrace();
				}
			}
			ent.setWinGroup(winUN);
			dto.setEnt(ent);
			try {
				dto = getDAO().saveGroup(dto);
				groupComboLST = getDAO().getGroupComboLST(user);
			} catch (AIPException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if("saveAndNew".equalsIgnoreCase(reqCode)){
				GroupENT ent1 = new GroupENT();
				GroupDTO dto1 = new GroupDTO();
				dto1.setEnt(ent1);
				request.setAttribute("groupDTO", dto1);
			}else{
				request.setAttribute("groupDTO", dto);
			}
			request.setAttribute("comboLST", groupComboLST);
			
			af = mapping.findForward("edit");
		} else if("deletes".equalsIgnoreCase(reqCode)){
			String deleteIds = request.getParameter("deleteIds");
			AIPBaseDeleteParam param = new AIPBaseDeleteParam();
			param.setIds(deleteIds);
			GroupLSTParam paramlst = new GroupLSTParam();
			GroupLST groupLST = new GroupLST();
			paramlst.setFilter(filter);
			try {
				groupLST = getDAO().getGroupLST(paramlst);
				getDAO().deleteUserGroup(param);
				groupForm.setSuccessMessage("عملیات حذف با موفقیت انجام شد");
			} catch (AIPException e) {
				e.printStackTrace();
				String error = AIPErrorHandler.handle(request, this, e, "", "");
				groupForm.setErrorMessage(error);				
			}
			request.setAttribute("param", paramlst);
			request.setAttribute("groupLST", groupLST);			
			af = mapping.findForward("list");
			
		} else if("delete".equalsIgnoreCase(reqCode)){
			int deleteId = NVL.getInt(request.getParameter("deleteId"));
			AIPBaseDeleteParam param = new AIPBaseDeleteParam();
			param.setId(deleteId);
			GroupLSTParam paramlst = new GroupLSTParam();
			GroupLST groupLST = new GroupLST();
			paramlst.setFilter(filter);
			AIPDefaultParam param2 = new AIPDefaultParam();
			param2.setId(deleteId);
			GroupDTO groupDTO = new GroupDTO();
			try {
				try {
					groupDTO = getDAO().getGroupDTO(param2);
				} catch (AIPException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				AIPOSManager.getOS().delWinGroup(groupDTO.getEnt().getWinGroup());
			} catch (AIPOSException e) {
				groupForm.setErrorMessage("سیستم قادر به حذف گروه در سیستم عامل نمی باشد");
				e.printStackTrace();
			}
			try {
				groupDTO = getDAO().getGroupDTO(param2);
			} catch (AIPException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			try {
				getDAO().deleteUserGroup(param);
				groupForm.setSuccessMessage("عملیات حذف با موفقیت انجام شد");
			} catch (AIPException e) {
				e.printStackTrace();
				String error = AIPErrorHandler.handle(request, this, e, "", "");
				groupForm.setErrorMessage(error);
			}
			try {
				groupLST = getDAO().getGroupLST(paramlst);
			} catch (AIPException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}			
			request.setAttribute("param", paramlst);
			request.setAttribute("groupLST", groupLST);			
			af = mapping.findForward("list");
			
		}   
		return af;
	}
	private static GroupDAOInterface getDAO() {
		return SellDAOManager.getGroupDAOInterface();
	}
	private static UserDAOInterface getDAOForUsers() {
		return SellDAOManager.getUserDAOInterface();
	}

}