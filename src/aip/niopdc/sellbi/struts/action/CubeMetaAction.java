/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package aip.niopdc.sellbi.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.tonbeller.jpivot.xmla.XMLA_Member;
import com.tonbeller.jpivot.xmla.XMLA_OlapItem;

import aip.common.AIPException;
import aip.common.security.user.UserDAOInterface;
import aip.niopdc.sellbi.orm.SellDAOManager;
import aip.niopdc.sellbi.struts.SellRemoteManager;
import aip.tag.tree.AIPTree;
import aip.util.NVL;
import aip.util.UTF8;
import aip.xmla.AIPXmla;

public class CubeMetaAction extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		//response.setCharacterEncoding("utf8");
		//response.setHeader("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">", "");		
		response.setContentType("text/html; charset=utf-8");
		
		try {
			
			//AIPXmla aipxmla = AIPXmla.getXmla( getDAO().getXMLAUser(request.getRemoteUser()) , getDAO().getXMLAPassword(request.getRemoteUser()) );
			AIPXmla aipxmla = SellDAOManager.getXmla( request.getRemoteUser() );
			

			String reqCode = NVL.getEmptyString(request.getParameter("reqCode"),"dimensions");
			String id=UTF8.cnvUTF8( request.getParameter("id") );
			
			System.out.println("CubeMetaAction.execute():reqCode="+reqCode);

			PrintWriter out = response.getWriter();
			String text="", url,oid="";
		
			//String nodeType = NVL.getString(request.getParameter("nodeType"), "DEFAULT");
			if("dimensions".equalsIgnoreCase(reqCode)){
				List<XMLA_OlapItem> lstDimensions=null;
				lstDimensions=aipxmla.getDimensions();

				for (XMLA_OlapItem dim : lstDimensions) {
					oid = dim.getUniqueName();
					text = dim.getCaption();
					url = "cubemeta.do?reqCode=dimension&id="+oid;
					if("true".equals(request.getParameter("isForQuery"))){
						url = url + "&isForQuery=true";
						AIPTree.appendTreeNode(out, text, url, "selectedNodeChange4Query('"+oid+"');", oid);
					} else {
						AIPTree.appendTreeNode(out, text, url, "selectedNodeChange('"+oid+"');", oid);
					}
				}			
			}else if("dimension".equalsIgnoreCase(reqCode)){
				List<XMLA_OlapItem> lstHierarchies=null;
				lstHierarchies=aipxmla.getHierarchys(id);

				for (XMLA_OlapItem hierarchy : lstHierarchies) {
					oid = hierarchy.getUniqueName();
					text = hierarchy.getCaption();
					url = "cubemeta.do?reqCode=hierarchy&id="+oid+"&dim="+id;
					if("true".equals(request.getParameter("isForQuery"))){
						url = url + "&isForQuery=true";
						AIPTree.appendTreeNode(out, text, url, "selectedNodeChange4Query('"+oid+"');", oid);
					} else {
						AIPTree.appendTreeNode(out, text, url,"selectedNodeChange('"+oid+"');", oid);
					}
					System.out.println("CubeMetaAction.execute():"+url);
				}			
			}else if("hierarchy".equalsIgnoreCase(reqCode)){
				List<XMLA_OlapItem>  lstLevels=null;
				lstLevels=aipxmla.getLevels("", id);

				for (XMLA_OlapItem  level : lstLevels) {
					oid = level.getUniqueName();
					text = level.getCaption();
					if("(All)".equalsIgnoreCase(text)){
						text="(اعضا)";
					}
					url = "cubemeta.do?reqCode=level&id="+oid+"&levelcount="+(lstLevels.size()-1);
					if("true".equals(request.getParameter("isForQuery"))){
						url = url + "&isForQuery=true";
						AIPTree.appendTreeNode(out, text, url, "selectedNodeChange4Query('"+oid+"');", oid);
					} else {
						AIPTree.appendTreeNode(out, text,url, "selectedNodeChange('"+oid+"');", oid);
					}
				}			
			}else if("level".equalsIgnoreCase(reqCode)){
				int levelCount = NVL.getInt(request.getParameter("levelcount"));
				
				List<XMLA_OlapItem>  lstMembers=null;
				lstMembers=aipxmla.getMembers("","",id);

				for (XMLA_OlapItem  level : lstMembers) {
					oid = level.getUniqueName().replaceAll("&", "_amp;");
					text = level.getCaption();
					url = "cubemeta.do?reqCode=member&id="+oid;
					if(id.indexOf("(All)")>=0 && levelCount>0){
						url += "&levelcount="+(levelCount-1);
						if("true".equals(request.getParameter("isForQuery"))){
							url = url + "&isForQuery=true";
							AIPTree.appendTreeNode(out, text, url, "selectedNodeChange4Query('"+oid+"');", oid);
						} else {
							AIPTree.appendTreeNode(out, text,url, "selectedNodeChange('"+oid+"');", oid);
						}
					}else{
						if("true".equals(request.getParameter("isForQuery"))){
							url = url + "&isForQuery=true";
							AIPTree.appendTreeNodeLeaf(out, text,"selectedNodeChange4Query('"+oid+"');", oid);
						} else {
							AIPTree.appendTreeNodeLeaf(out, text,"selectedNodeChange('"+oid+"');", oid);
						}
					}
				}			
			}else if("member".equalsIgnoreCase(reqCode)){
				int levelCount = NVL.getInt(request.getParameter("levelcount"));

				List<XMLA_OlapItem>  lstMemberTree=null;
				id=id.replaceAll("_amp;", "&");
				lstMemberTree=aipxmla.getMemberTree(id,AIPXmla.MDTREEOP_CHILDREN);

				for (XMLA_OlapItem  level : lstMemberTree) {
					oid = level.getUniqueName().replaceAll("&", "_amp;");
					text = level.getCaption();
					url = "cubemeta.do?reqCode=member&id="+oid;
					if(levelCount>0){
						url += "&levelcount="+(levelCount-1);
						if("true".equals(request.getParameter("isForQuery"))){
							url = url + "&isForQuery=true";
							AIPTree.appendTreeNode(out, text, url, "selectedNodeChange4Query('"+oid+"');", oid);
						} else {
							AIPTree.appendTreeNode(out, text,url, "selectedNodeChange('"+oid+"');", oid);
						}
					}else{
						if("true".equals(request.getParameter("isForQuery"))){
							url = url + "&isForQuery=true";
							AIPTree.appendTreeNodeLeaf(out, text,"selectedNodeChange4Query('"+oid+"');", oid);
						} else {
							AIPTree.appendTreeNodeLeaf(out, text,"selectedNodeChange('"+oid+"');", oid);
						}
					}
				}			
			}else if("filter".equalsIgnoreCase(reqCode)){
				List<XMLA_Member>  lstMember=null;
				id=id.replaceAll("_amp;", "&");
				lstMember=aipxmla.getFilterItemMembers(id);

				for (XMLA_Member member : lstMember) {
					oid = member.getUniqueName().replaceAll("&", "_amp;");
					text = member.getCaption();
					url = "cubemeta.do?reqCode=filterdrill&id="+oid;
					AIPTree.appendTreeNode(out, text,url, "selectedNodeChangeFilter('"+text+"','"+oid+"');", oid);
				}			
			}else if("filterdrill".equalsIgnoreCase(reqCode)){
				List<XMLA_OlapItem>  lstMemberTree=null;
				id=id.replaceAll("_amp;", "&");
				lstMemberTree=aipxmla.getMemberTree(id,AIPXmla.MDTREEOP_CHILDREN);

				for (XMLA_OlapItem  level : lstMemberTree) {
					oid = level.getUniqueName().replaceAll("&", "_amp;");
					text = level.getCaption();
					url = "cubemeta.do?reqCode=filterdrill&id="+oid;
					AIPTree.appendTreeNode(out, text,url, "selectedNodeChangeFilter('"+text+"','"+oid+"');", oid);
				}			
			}else{
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (AIPException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	private static UserDAOInterface getDAO() {
		return SellDAOManager.getUserDAOInterface();
	}
	
}