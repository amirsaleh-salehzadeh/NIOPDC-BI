/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package aip.niopdc.sellbi.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.criterion.CriteriaSpecification;

import aip.common.AIPBaseDeleteParam;
import aip.common.AIPDefaultParam;
import aip.common.AIPException;
import aip.common.AIPWebUser;
import aip.common.folder.FolderAndReportDTO;
import aip.common.folder.FolderENT;
import aip.common.folder.FolderInterface;
import aip.common.report.ReportCriteriaENT;
import aip.common.report.ReportENT;
import aip.niopdc.sellbi.struts.SellRemoteManager;
import aip.tag.tree.AIPTree;
import aip.util.AIPUtil;
import aip.util.DateCnv;
import aip.util.NVL;
import aip.util.UTF8;
import aip.xmla.AIPXmla;

public class AipbimdxAction extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) {
		//response.setCharacterEncoding("utf8");
		response.setContentType("text/html; charset=utf-8");
		
		String reqCode = request.getParameter("reqCode");

		System.out.println("NavigationAction.execute()...............................:reqCode="+reqCode);

		if("saveReport".equalsIgnoreCase(reqCode)||"saveAsReport".equalsIgnoreCase(reqCode)){
			
			try{
				
			ReportENT ent = new ReportENT();
			
			/**
			 * get report info
			 */
			ent.setCreateDate( NVL.getString( request.getParameter("createDate") , DateCnv.nowJalali() ) );
			ent.setDefaultDiagramType( NVL.getString( request.getParameter("") , "table" ) );
			ent.setFolderId( NVL.getInteger( NVL.getInt( request.getParameter("folderId") ) ) );
			if(!"saveAsReport".equalsIgnoreCase(reqCode)){
				ent.setId( NVL.getInteger( NVL.getInt( request.getParameter("id") ) ) );
			}
			ent.setIsPublic( NVL.getBool( request.getParameter("isPublic") , false ) );
			ent.setIsVisual( NVL.getBool( request.getParameter("isVisual") , false ) );
			ent.setMdxQuery(  NVL.getString( request.getParameter("mdxquery").replaceAll("_amp;", "&") ) );
			ent.setMdxQueryNC(  NVL.getString( request.getParameter("mdxquerync").replaceAll("_amp;", "&") ) );
			ent.setReportName( NVL.getString( request.getParameter("reportName") ) );
			ent.setUserName( NVL.getStringNull( request.getRemoteUser() ) );

			
			/**
			 * get criterias
			 */
			String criteria_names[]=request.getParameterValues("param_name");
			String criteria_mdxs[]=request.getParameterValues("param_condition");
			String criteria_default_values[]=request.getParameterValues("param_default_value");
			String criteria_default_captions[]=request.getParameterValues("param_default_caption");
			
			if(criteria_names!=null && criteria_names.length>0){
				List<ReportCriteriaENT> criterias = new ArrayList<ReportCriteriaENT>();
				for(int i=0;i<criteria_names.length;i++){
					ReportCriteriaENT criteria = new ReportCriteriaENT();

					criteria.setName(  criteria_names[i] );
					criteria.setCriteriaMdx(  criteria_mdxs[i] ) ;
					criteria.setDefaultValue( criteria_default_values[i] ) ;
					criteria.setDefaultCaption( criteria_default_captions[i] );
					
					criterias.add(criteria);
				}
				ent.setCriterias(criterias);
				
			}
			
			/**
			 * save
			 */
			System.out.println("AipbimdxAction.execute()!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
			AIPUtil.printObject(ent);
			try {
				System.out.println("AipbimdxAction.execute()");
				
				SellRemoteManager.getReportInterface().saveReport(ent);
				
				response.setStatus(HttpServletResponse.SC_OK);
			} catch (AIPException e) {
				e.printStackTrace();
				try {
					response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}

			}catch(Exception ex){
				ex.printStackTrace();
				try {
					response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ex.getMessage());
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			
		}else if("folder_report".equalsIgnoreCase(reqCode)){
			try {
				PrintWriter out = response.getWriter();
				AIPDefaultParam param = new AIPDefaultParam();
				AIPWebUser webUser = new AIPWebUser();
				param.setWebUser(webUser);
				ArrayList<FolderAndReportDTO> list = getDAO().getFolderAndReportTree(param);
				recursiveViewAppendNode(out, list , 0);
				out.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}else if("newFolder".equalsIgnoreCase(reqCode) || "editFolder".equalsIgnoreCase(reqCode)){
			String newFolderName = request.getParameter("newFolderInDialog");
			FolderENT ent = new FolderENT();
			boolean isPublic = false;
			if("true".equalsIgnoreCase(request.getParameter("isPublic")))
				isPublic = true;
			
			ent.setCaption(UTF8.cnvUTF8( newFolderName));
			ent.setUserName(UTF8.cnvUTF8( request.getRemoteUser()));
			if(!"".equalsIgnoreCase(request.getParameter("folderId"))){
				int id = NVL.getInteger(request.getParameter("folderId"));
				if("editFolder".equalsIgnoreCase(reqCode)){
					ent.setId(id);
				} else {
					ent.setParentId(id);	
				}	
			}
			
			
			ent.setIsPublic(isPublic);
			try {
				ent = getDAO().saveFolder(ent);
			} catch (AIPException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			request.setAttribute("ent", ent);
		}else if("delFolder".equalsIgnoreCase(reqCode)){
			AIPBaseDeleteParam param = new AIPBaseDeleteParam();
			param.setId(NVL.getInteger(request.getParameter("folderId")));
			getDAO().deleteFolder(param);
		}
		return null;
	}
	FolderInterface getDAO() {
		return SellRemoteManager.getFolderInterface();
	}
	private void recursiveViewAppendNode(PrintWriter out,ArrayList<FolderAndReportDTO> list,int folderId) {
		FolderAndReportDTO dto ;
		for (int i=list.size()-1;i>=0;i--) {
			dto = list.get(i);
			String oid = NVL.getString( dto.getId() );
			String text = dto.getCaption();	
			if(dto.getIsFolder()){
				out.print("<ul><li class=\"folder-open-last\"><span class=\"toggler\"></span><span class=\"text\" onclick=\"selectedNodeChangeFolderReport('");
				out.print(oid);
				out.print("');\" id=\"");
				out.print(oid);
				out.print("\">");
				out.print(text);
				out.print("</span>");
				out.print("<ul style=\"display: block;\">");
			}else{
				out.print("<ul><li class=\"leaf-last\"><span class=\"text\" onclick=\"selectedNodeChangeFolderReport('");
				out.print(folderId);
				out.print("');\" id=\"");
				out.print(oid);
				out.print("\">");
				out.print(text);
				out.print("</span></li>");
			}
			recursiveViewAppendNode(out, dto.getChildrens(),dto.getId());
			if(dto.getIsFolder()){
				out.print("</ul></li>");
				out.print("</ul>");
			}else{
				out.print("</ul>");
			}
		}
	}
}