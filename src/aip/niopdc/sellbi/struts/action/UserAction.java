/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package aip.niopdc.sellbi.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import aip.common.AIPBaseDeleteParam;
import aip.common.AIPDefaultParam;
import aip.common.AIPException;
import aip.common.AIPWebUser;
import aip.common.security.user.ChangePasswordParam;
import aip.common.security.user.UserComboLST;
import aip.common.security.user.UserDAOInterface;
import aip.common.security.user.UserENT;
import aip.common.security.user.UserForSaveENT;
import aip.common.security.user.UserLST;
import aip.common.security.user.UserLSTParam;
import aip.common.security.user.UserPassword;
import aip.niopdc.sellbi.orm.SellDAOManager;
import aip.niopdc.sellbi.struts.form.user.UserForm;
import aip.util.AIPErrorHandler;
import aip.util.NVL;
import aip.util.UTF8;
import aip.util.os.AIPOSException;
import aip.util.os.AIPOSManager;
import aip.xmla.AIPXmla;

/** 
 * MyEclipse Struts
 * Creation date: 11-09-2009
 * 
 * XDoclet definition:
 * @struts.action path="/user" name="userForm" input="/form/user/userList.jsp" scope="request" validate="true"
 * @struts.action-forward name="list" path="/form/user/userList.jsp"
 * @struts.action-forward name="edit" path="/form/user/userEdit.jsp"
 */
public class UserAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws FileNotFoundException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws FileNotFoundException {
		UserForm userForm = (UserForm) form;
		userForm.setErrorMessage("");
		userForm.setSuccessMessage("");
		String reqCode = request.getParameter("reqCode");
		ActionForward af = new ActionForward();
		if("".equalsIgnoreCase(reqCode)||"list".equalsIgnoreCase(reqCode)||reqCode == null){
			UserLSTParam param  = new UserLSTParam();
			AIPWebUser user = new AIPWebUser();
			UserComboLST userComboLST = new UserComboLST();
			if("list".equalsIgnoreCase(reqCode)){
				param.setReqPage(NVL.getInt(request.getParameter("page")));
				param.setFilter(request.getParameter("filter"));
				param.setGroupId(NVL.getInt(request.getParameter("groupId")));
			}
			UserLST userLST = new UserLST();
			try {
				userLST = getDAO().getUserLST(param);
				userComboLST = getDAO().getUserComboLST(user);
			} catch (AIPException e) {
				e.printStackTrace();
			}
			request.setAttribute("userList", userLST);
			request.setAttribute("param", param);
			request.setAttribute("comboLST", userComboLST);
			af = mapping.findForward("list");
		} else if("edit".equalsIgnoreCase(reqCode)||"new".equalsIgnoreCase(reqCode)){
			AIPDefaultParam param = new AIPDefaultParam();
			AIPWebUser user = new AIPWebUser(request);
			user.setRemoteUser(request.getParameter("editUserName"));
			param.setWebUser(user);

			UserForSaveENT saveENT = new UserForSaveENT();
			UserENT userENT = new UserENT();
			userENT.setUserName("");
			saveENT.setUserENT(userENT);
			UserComboLST userComboLST = new UserComboLST(); 
			if(!"new".equalsIgnoreCase(reqCode)){
				try {
					saveENT = getDAO().getUserForSaveENT(param);
				} catch (AIPException e) {
					e.printStackTrace();
				}
			}
			try {
				userComboLST = getDAO().getUserComboLST(user);
			} catch (AIPException e) {
				e.printStackTrace();
			}
			request.setAttribute("comboLST", userComboLST);
			request.setAttribute("saveENT", saveENT);
			af = mapping.findForward("edit");
		} else if("delete".equalsIgnoreCase(reqCode)){
			AIPBaseDeleteParam paramdel = new AIPBaseDeleteParam();
			paramdel.setId(NVL.getInt(request.getParameter("deleteUserId")));
			paramdel.setIds(request.getParameter("deleteIds"));
			AIPWebUser webUser = new AIPWebUser();
			webUser.setRemoteUser(request.getParameter("deleteUserName"));
			paramdel.setWebUser(webUser);
			UserComboLST userComboLST = new UserComboLST();
			try {
				UserForSaveENT forSaveENT  = getDAO().getUserForSaveENT( new AIPDefaultParam(webUser, paramdel.getId()));
				userComboLST = getDAO().getUserComboLST(webUser);
				getDAO().deleteUserUser(paramdel);
				try {
					AIPOSManager.getOS().delWinUser(forSaveENT.getUserENT().getWinUser());
				} catch (AIPOSException e) {
					e.printStackTrace();
				}
			} catch (AIPException e) {
				e.printStackTrace();
				String error = AIPErrorHandler.handle(request, this, e, "", "");
				userForm.setErrorMessage(error);				
			}
			UserLSTParam param  = new UserLSTParam();
			if("list".equalsIgnoreCase(reqCode)){
				param.setFilter(request.getParameter("filter"));
			}
			UserLST userLST = new UserLST();
			try {
				userLST = getDAO().getUserLST(param);
			} catch (AIPException e) {
				e.printStackTrace();
			}
			request.setAttribute("comboLST", userComboLST);
			request.setAttribute("userList", userLST);
			request.setAttribute("param", param);
			af = mapping.findForward("list");
		} else if("save".equalsIgnoreCase(reqCode)){
			AIPWebUser webUser = new AIPWebUser();
			webUser.setRemoteUser(UTF8.cnvUTF8(request.getParameter("userENT.userName")));
			UserForSaveENT forSaveENT = new UserForSaveENT();
			UserENT userENT = new UserENT();
			String userId = request.getParameter("userENT.id");
			if(!"".equalsIgnoreCase(userId)){
				try {
					userENT = getDAO().getUserENT(UTF8.cnvUTF8(request.getParameter("userENT.userName")));
				} catch (AIPException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			userENT.setAddress(UTF8.cnvUTF8(request.getParameter("userENT.address")));
			userENT.setCellPhone(UTF8.cnvUTF8(request.getParameter("userENT.cellPhone")));
			userENT.setDescription(UTF8.cnvUTF8(request.getParameter("userENT.description")));
			userENT.setEndDate(UTF8.cnvUTF8(request.getParameter("userENT.endDate")));
			userENT.setFirstName(UTF8.cnvUTF8(request.getParameter("userENT.firstName")));
			userENT.setIdentityNo(UTF8.cnvUTF8(request.getParameter("userENT.identityNo")));
			boolean isApproved = false;
			if("on".equalsIgnoreCase(UTF8.cnvUTF8(request.getParameter("userENT.isApproved")))){
				isApproved = true;
			}
			userENT.setIsApproved(isApproved);
			userENT.setLastName(UTF8.cnvUTF8(request.getParameter("userENT.lastName")));
			userENT.setMailAddress(request.getParameter("userENT.mailAddress"));
			userENT.setNationalCode(UTF8.cnvUTF8(request.getParameter("userENT.nationalCode")));
			userENT.setPhone(UTF8.cnvUTF8(request.getParameter("userENT.phone")));
			userENT.setStartDate(UTF8.cnvUTF8(request.getParameter("userENT.startDate")));
			userENT.setUserName(UTF8.cnvUTF8(request.getParameter("userENT.userName")));


			String winUN = request.getParameter("userENT.winUser");
			String winPW = request.getParameter("userENT.winPassword");
			if(winUN==null || "".equals(winUN)){
				String _winUN = "xmla_"+userENT.getUserName();
				String _winPW = "xmla_123";
				try {
					winUN=_winUN;
					winPW=_winPW;
					AIPOSManager.getOS().addWinUser(_winUN, _winPW);
				} catch (AIPOSException e) {
					e.printStackTrace();
				}
			}
			userENT.setWinUser(winUN);
			userENT.setWinPassword(winPW);
			forSaveENT = new UserForSaveENT();
			forSaveENT.setUserENT(userENT);
			forSaveENT.setUserRoleIds(request.getParameter("userRoleIds"));
			forSaveENT.setUserGroupIds(request.getParameter("userGroupIds"));
			
			forSaveENT.setWebUser( new AIPWebUser(request) );
			
			try {
				forSaveENT = getDAO().saveUser(forSaveENT);

				if(!"".equalsIgnoreCase(request.getParameter("userENT.userPassword"))){
					UserPassword userPassword = new UserPassword();
					userPassword.setId(forSaveENT.getUserENT().getId());
					userPassword.setUserPassword(request.getParameter("userENT.userPassword"));
					userPassword.setUserName(forSaveENT.getUserENT().getUserName());
					forSaveENT.setUserPassword(userPassword);
					forSaveENT = getDAO().saveUser(forSaveENT);
				}				
			} catch (AIPException e) {
				e.printStackTrace();
				String error = AIPErrorHandler.handle(request, this, e, "", "");
				userForm.setErrorMessage(error);
			}
			forSaveENT.setUserRoleIds(request.getParameter("userRoleIds"));
			forSaveENT.setUserGroupIds(request.getParameter("userGroupIds")); 
			request.setAttribute("saveENT", forSaveENT);
			af = mapping.findForward("edit");
		} else if("grouplist".equalsIgnoreCase(reqCode)){
			AIPWebUser user = new AIPWebUser(request);
			user.setRemoteUser(request.getParameter("editUserName"));
			UserComboLST userComboLST = new UserComboLST(); 
			AIPDefaultParam param = new AIPDefaultParam();
			UserForSaveENT saveENT = new UserForSaveENT();
			UserENT userENT = new UserENT();
			saveENT.setUserENT(userENT);
			param.setWebUser(user);
			try {
					saveENT = getDAO().getUserForSaveENT(param);
				} catch (AIPException e) {
					e.printStackTrace();
				}
			try {
				userComboLST = getDAO().getUserComboLST(user);
			} catch (AIPException e) {
				e.printStackTrace();
			}
			request.setAttribute("comboLST", userComboLST);
			request.setAttribute("userInfo", saveENT);
			af = mapping.findForward("grouplist");			
		} else if("saveDeatils".equalsIgnoreCase(reqCode)){
			String username = request.getParameter("editUserName");
			AIPDefaultParam param = new AIPDefaultParam();
			AIPWebUser webUser = new AIPWebUser();
			UserForSaveENT forSaveENT = new UserForSaveENT();
			webUser.setRemoteUser(username);
			param.setWebUser(webUser);
			try {
				forSaveENT = getDAO().getUserForSaveENT(param);
				forSaveENT.setUserRoleIds(request.getParameter("userRoleIds"));
				forSaveENT.setUserGroupIds(request.getParameter("userGroupIds"));
				forSaveENT = getDAO().saveUser(forSaveENT);
			} catch (AIPException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			UserLSTParam param2  = new UserLSTParam();
			AIPWebUser user = new AIPWebUser();
			UserComboLST userComboLST = new UserComboLST();
			UserLST userLST = new UserLST();
			try {
				userLST = getDAO().getUserLST(param2);
				userComboLST = getDAO().getUserComboLST(user);
			} catch (AIPException e) {
				e.printStackTrace();
			}
			request.setAttribute("userList", userLST);
			request.setAttribute("param", param2);
			request.setAttribute("comboLST", userComboLST);
			af = mapping.findForward("list");			
		} else if("changepasword".equalsIgnoreCase(reqCode)){
			ChangePasswordParam param = new ChangePasswordParam();
			AIPWebUser webUser = new AIPWebUser();
			webUser.setRemoteUser(request.getParameter("userName"));
			param.setNewPassword(request.getParameter("newPassword"));
			param.setOldPassword(request.getParameter("oldPassword"));
			param.setWebUser(webUser);
			af=null;
			try {
				getDAO().changeUserPassword(param);
			} catch (AIPException er) {
				String e = AIPErrorHandler.handle(request, this, er, "", "");
				er.printStackTrace();
				try {
					response.sendError(500, e);
					request.setAttribute("error", e);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		} else if("ssasroles".equalsIgnoreCase(reqCode)){
			AIPXmla aipxmla;
			String all="";
			String user = "";
			try {
				aipxmla = SellDAOManager.getXmla( request.getRemoteUser() );
				all = aipxmla.getRoles();
				AIPWebUser webUser = new AIPWebUser(); 
				webUser.setRemoteUser(request.getRemoteUser());
				AIPDefaultParam param = new AIPDefaultParam();
				webUser.setRemoteUser(request.getParameter("editUserName"));
				param.setWebUser(webUser);
				UserForSaveENT forSaveENT = getDAO().getUserForSaveENT(param);
				user = aipxmla.getUserRoles(forSaveENT.getUserENT().getWinUser());
			} catch (AIPException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String[] allRoles = all.split(",");
			request.setAttribute("user", user);
			request.setAttribute("all", allRoles);
			af = mapping.findForward("ssas");
		} else if("ssasrolesSave".equalsIgnoreCase(reqCode)){
			String userName = request.getParameter("userName");
			String[] roles = request.getParameterValues("ssasRoles");
			String allRoles="";
			UserForSaveENT forSaveENT = new UserForSaveENT();
			AIPWebUser webUser = new AIPWebUser();
			webUser.setRemoteUser(userName);
			try {
				forSaveENT = getDAO().getUserForSaveENT(new AIPDefaultParam(webUser, 0));
				UserENT userENT = new UserENT();
				if (forSaveENT.getUserENT().getWinUser() == null || "".equals(forSaveENT.getUserENT().getWinUser())){
					String _winUN = "xmla_"+forSaveENT.getUserENT().getUserName();
					String _winPW = "xmla_123";
					userENT = forSaveENT.getUserENT();
					userENT.setWinUser(_winUN);
					userENT.setWinPassword(_winPW);
					forSaveENT.setUserENT(userENT);
					forSaveENT = getDAO().saveUser(forSaveENT);
					try {
						AIPOSManager.getOS().addWinUser(forSaveENT.getUserENT().getWinUser(), forSaveENT.getUserENT().getWinPassword());
					} catch (AIPOSException e) {
						e.printStackTrace();
					}
				}
			} catch (AIPException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			for(int i = 0 ; i < roles.length ; i++){
				allRoles = allRoles + UTF8.cnvUTF8( roles[i] )+ ",";
			}
			try {
				AIPXmla xmla = SellDAOManager.getXmla( request.getRemoteUser() );
				xmla.updateUserRoles(forSaveENT.getUserENT().getWinUser(), allRoles);
			} catch (AIPException e) {
				e.printStackTrace();
			}
			return null;
		}
			return af;
	}
	private static UserDAOInterface getDAO() {
		return SellDAOManager.getUserDAOInterface();
	}


}