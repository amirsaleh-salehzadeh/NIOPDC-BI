/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package aip.niopdc.sellbi.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import aip.common.AIPDefaultParam;
import aip.common.AIPWebUser;
import aip.common.bireport.bimdx.MDXFunctions;
import aip.common.bireport.bimdx.MdxFunctionsInterface;
import aip.common.folder.FolderAndReportDTO;
import aip.common.folder.FolderInterface;
import aip.niopdc.sellbi.struts.SellRemoteManager;
import aip.util.NVL;

public class MdxFunctionsAction extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) {
		//response.setCharacterEncoding("utf8");
		response.setContentType("text/html; charset=utf-8");
		
		int id=NVL.getInt( request.getParameter("id") );
		
		

			try {
				PrintWriter out = response.getWriter();
				AIPDefaultParam param = new AIPDefaultParam();
				AIPWebUser webUser = new AIPWebUser();
				param.setWebUser(webUser);
				List allSubfunctions = getDAO().getAllSubFunctions();
				ArrayList<MDXFunctions> functionsList = new ArrayList<MDXFunctions>();
				out.print("<ul><li class=\".folder-close\"><span class=\"toggler\"></span><span class=\"text\"");
				out.print("id=\"");
				out.print("Samples");
				out.print("\">");
				out.print("Samples");
				out.print("</span>");
				out.print("<ul style=\"display: block;\">");
				out.print("<ul><li class=\"leaf-last\"><span class=\"text\" title=\"");
				out.print("Samples");
				out.print("\">");
				out.print("<a onclick='sample_click()'; >");
				out.print("Sample1");
				out.print("</a></span></li>");
				out.print("</ul>");
				out.print("</ul></li>");
				out.print("</ul>");
				recursiveViewAppendNode(out, allSubfunctions);
				out.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
		
		return null;
	}

	private void recursiveViewAppendNode(PrintWriter out,List allSubfunctions) {
		
		
		for (int i=0 ; i< allSubfunctions.size();i++) {

			
			
				out.print("<ul><li class=\".folder-close\"><span class=\"toggler\"></span><span class=\"text\"");
				out.print("id=\"");
				out.print(allSubfunctions.get(i));
				out.print("\">");
				out.print(allSubfunctions.get(i));
				out.print("</span>");
				out.print("<ul style=\"display: block;\">");
				String x= NVL.getString(allSubfunctions.get(i));
				ArrayList<MDXFunctions> functionsList =  getDAO().getMDXFunctions(x);
			for (int j = 0 ; j < functionsList.size() ; j ++){
				out.print("<ul><li class=\"leaf-last\"><span class=\"text\" title=\"");
				out.print(functionsList.get(j).getSyntax());
				out.print("\">");
				out.print("<a onclick=selectedNodeChangeFunctions(this); name='"+functionsList.get(j).getSyntax()+"'>");
				out.print(functionsList.get(j).getFunctionDescriptor());
				out.print("</a></span></li>");
				out.print("</ul>");
			}
				out.print("</ul></li>");
				out.print("</ul>");
		}
	}
	
	
	MdxFunctionsInterface getDAO() {
		return SellRemoteManager.getMDXFunctions();
	}
}