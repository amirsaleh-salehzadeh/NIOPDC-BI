/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package aip.niopdc.sellbi.struts.action.visual;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import aip.common.visualreport.VisualReportDTO;
import aip.common.visualreport.VisualReportDetailDTO;
import aip.common.visualreport.VisualReportLST;
import aip.jpivot.AIPPivotParam;
import aip.niopdc.sellbi.service.visual.VisualReportSRV;
import aip.niopdc.sellbi.struts.form.visual.VisualReport1Form;
import aip.util.NVL;
import aip.util.UTF8;

/** 
 * MyEclipse Struts
 * Creation date: 06-02-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="showNavigation" path="/layout/navigation.jsp"
 */
public class VisualReport1Action extends Action {
	
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) {
		VisualReport1Form visualReport1Form = (VisualReport1Form)form;
		VisualReportSRV srv = new VisualReportSRV();
		
		String reqCode = NVL.getString(request.getParameter("reqCode"));
		System.out.println("reqCode="+reqCode);
		
		request.setAttribute("selectedRowNames", UTF8.cnvUTF8( request.getParameter("selectedRowNames") ) );
		request.setAttribute("selectedColumnNames", UTF8.cnvUTF8( request.getParameter("selectedColumnNames") ) );
		request.setAttribute("selectedFilterNames", UTF8.cnvUTF8( request.getParameter("selectedFilterNames") ) );
		request.setAttribute("selectedMeasureNames", UTF8.cnvUTF8( request.getParameter("selectedMeasureNames") ) );
		request.setAttribute("selectedRows", UTF8.cnvUTF8( request.getParameter("selectedRows") ) );
		request.setAttribute("selectedColumns", UTF8.cnvUTF8( request.getParameter("selectedColumns") ) );
		request.setAttribute("selectedFilters", UTF8.cnvUTF8( request.getParameter("selectedFilters") ) );
		request.setAttribute("selectedMeasures", UTF8.cnvUTF8( request.getParameter("selectedMeasures") ) );
		
 		String[] rows = convertUTF8(request.getParameterValues("selectedRowsIds"));
 		String[] columns = convertUTF8(request.getParameterValues("selectedColumnsIds"));
 		String[] filters = convertUTF8(request.getParameterValues("selectedFiltersIds"));
 		String[] measures = convertUTF8(request.getParameterValues("selectedMeasuresIds"));

 		
 		 
 		
		if ("deleteIds".equalsIgnoreCase(reqCode)) {
			srv.deleteVisualReport(NVL.getString(request.getParameter("selectedIds")));
		}if("delete".equalsIgnoreCase(reqCode)){
			srv.deleteVisualReport(NVL.getInt(request.getParameter("reportId")));
		}else if ("edit".equalsIgnoreCase(reqCode)) {
			int reportId = NVL.getInt(request.getParameter("reportId"));
			visualReport1Form.setVisualReportDTO(srv.getVisualReportDTO(reportId));
			
			List<VisualReportDetailDTO> list = visualReport1Form.getVisualReportDTO().getChildren();
			for(int i=0;i<list.size();i++){
				if(list.get(i).getType().equalsIgnoreCase("Row")){
					visualReport1Form.setSelectedRows(NVL.getString(visualReport1Form.getSelectedRows())+NVL.getString(list.get(i).getSelectedMembers()));
				}
				if(list.get(i).getType().equalsIgnoreCase("Column")){
					visualReport1Form.setSelectedColumns(NVL.getString(visualReport1Form.getSelectedColumns())+NVL.getString(list.get(i).getSelectedMembers()));
				}
				if(list.get(i).getType().equalsIgnoreCase("Filter")){
					visualReport1Form.setSelectedFilters(NVL.getString(visualReport1Form.getSelectedFilters())+NVL.getString(list.get(i).getSelectedMembers()));
				}
				if(list.get(i).getType().equalsIgnoreCase("Measure")){
					visualReport1Form.setSelectedMeasures(NVL.getString(visualReport1Form.getSelectedMeasures())+NVL.getString(list.get(i).getSelectedMembers()));
				}
			}
			request.setAttribute("visualReport1Form", visualReport1Form);
			return mapping.findForward("edit");
		}else if ("save".equalsIgnoreCase(reqCode)) {
			VisualReportDTO dto = visualReport1Form.getVisualReportDTO();
			UTF8.makeObjUTF8(dto);

//			String query = createQuery(request);
//			query = query.replaceAll("%26","&");
//			dto.setQuery(query);
			
			dto = srv.saveVisualReport(dto,rows,columns,filters,measures);
			
			visualReport1Form.setVisualReportDTO(dto);
			visualReport1Form.setSelectedRows(UTF8.cnvUTF8(visualReport1Form.getSelectedRows()));
			visualReport1Form.setSelectedColumns(UTF8.cnvUTF8(visualReport1Form.getSelectedColumns()));
			visualReport1Form.setSelectedFilters(UTF8.cnvUTF8(visualReport1Form.getSelectedFilters()));
			visualReport1Form.setSelectedMeasures(UTF8.cnvUTF8(visualReport1Form.getSelectedMeasures()));
			request.setAttribute("visualReport1Form", visualReport1Form);
			return mapping.findForward("edit");
		}else if ("new".equalsIgnoreCase(reqCode)) {
			request.setAttribute("visualReport1Form", visualReport1Form);
			return mapping.findForward("edit");
		}else if("execute".equalsIgnoreCase(reqCode)){
			try {
				VisualReportDTO dto = visualReport1Form.getVisualReportDTO();
				UTF8.makeObjUTF8(dto);
				
				String query = srv.createVisualQuery(rows,columns,filters,measures);
				AIPPivotParam param = new AIPPivotParam();
				param.setFormAction("pivotview.jsp");
				param.setMdxQuery(query);
				System.out.println("VisualReportAction.execute()");
				
				param.setQueryName(visualReport1Form.getVisualReportDTO().getQueryName());
				param.setLoader("visualreport.do?reqCode=return&reportId="+visualReport1Form.getVisualReportDTO().getId()+/*"&visualQuery="+query+*/"&queryName="+param.getQueryName());
				request.getSession().setAttribute("AIPPivotParam",param);
				
				response.sendRedirect("pivotview.jsp?reqCode=refresh");
				return null;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else if ("return".equalsIgnoreCase(reqCode)) {
			int reportId = NVL.getInt(request.getParameter("reportId"));
			visualReport1Form.setVisualReportDTO(srv.getVisualReportDTO(reportId));
			visualReport1Form.getVisualReportDTO().setQuery(UTF8.cnvUTF8(request.getParameter("visualQuery")));
			visualReport1Form.getVisualReportDTO().setQueryName(UTF8.cnvUTF8(request.getParameter("queryName")));
//			visualReport1Form.setDimensionTreeLST(srv.getDimensionTreeLST(""));
			request.setAttribute("visualReport1Form", visualReport1Form);
			return mapping.findForward("edit");
//		}else if("member".equalsIgnoreCase(reqCode)){
//			try{
//				String _User ="";
//				String _Password="";
//				String id=UTF8.cnvUTF8( request.getParameter("id") );
//				String text="", url,oid="";
//				PrintWriter out = response.getWriter();
//				String report = NVL.getString(request.getParameter("reporttype"));
//				XMLA_SOAP xmla_soap=new XMLA_SOAP(AIPOlap.getDataSourceURI(),_User,_Password);
//				
//				List<XMLA_OlapItem> lstMembers=null;
//				System.out.println("Members2Action.execute():parent="+id);
//				lstMembers=xmla_soap.discoverMemTree(AIPOlap.getCatalog(),AIPOlap.getCubeName(), id,1);
//				DimensionMember dm = null;
//				ArrayList<DimensionMember> rows = new ArrayList<DimensionMember>();
//				for (XMLA_OlapItem member : lstMembers) {
//					oid = member.getUniqueName().replace("&", "%26");;
//					text = member.getCaption();
//					url = "members2.do?reqCode=member&id="+oid+"&parent="+id+(report.equalsIgnoreCase("visual") ? "&reporttype=visual" : "");
//					System.out.println("Members2Action.execute():url="+url);
//					AIPTree.appendTreeNode(out, text, url, "dbclickCreateQuery(reportQuery,this);",oid);
//					
//					rows.add(new DimensionMember(member.getCaption(),oid));
//				}
//				request.setAttribute("rows", rows);
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			} catch (OlapException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//
		}
		VisualReportLST lst =	srv.getVisualReportDTOs();
		visualReport1Form.setVisualReportLST(lst);

		request.setAttribute("visualReport1Form", visualReport1Form);
		return mapping.findForward("list");
	}
	
	private String[] convertUTF8(String[] arr) {
		if(arr != null && arr.length>0){
			for(int i=0;i<arr.length;i++){
				arr[i] = UTF8.cnvUTF8(arr[i]);
			}
		}
		return arr;
	}

	private String createQuery(HttpServletRequest request){
		VisualReportSRV srv = new VisualReportSRV();
		//String selectedRows = NVL.getString(request.getParameterValues("selectedRows"));
 		String[] rows = request.getParameterValues("selectedRows");
 		String[] columns = request.getParameterValues("columnsSelected");
 		String[] filters = request.getParameterValues("filtersSelected");
 		String[] measures = request.getParameterValues("measuresSelected");
//		System.out.println("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL");
// 		if(request.getParameterValues("rowsSelected") != null&& request.getParameterValues("rowsSelected").length!=0)
//	 		for(String st:request.getParameterValues("rowsSelected")){
//	 			System.out.println(UTF8.cnvUTF8(st));
//	 		}
// 		System.out.println("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL");

 		/*
 		 * get rowIds & dim
 		 */
 		String rowIds = "";
 		List<String> rowsDim=new ArrayList<String>();
 		if(rows != null && rows.length>0){
 			for(String st :rows){
 				st = UTF8.cnvUTF8(st);
 				String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
 				rowsDim.add(dim);
	 			
	 			rowIds+=st.substring(st.indexOf('}')+1);
	 		}
 		}
 		
 		/*
 		 * 
 		 */
 		String columnIds = "";
 		List<String> columnsDim=new ArrayList<String>();
 		if(columns != null && columns.length>0){
 			for(String st :columns){
 				st = UTF8.cnvUTF8(st);
 				String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
 				columnsDim.add(dim);
	 			
 				columnIds+=st.substring(st.indexOf('}')+1);
	 		}
 		}

 		/*
 		 * 
 		 */
 		String filterIds = "";
 		List<String> filtersDim=new ArrayList<String>();
 		if(filters != null && filters.length>0){
 			for(String st :filters){
 				st = UTF8.cnvUTF8(st);
 				String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
 				filtersDim.add(dim);
	 			
 				filterIds+=st.substring(st.indexOf('}')+1);
	 		}
 		}

 		/*
 		 * 
 		 */
 		String measureIds = "";
 		List<String> measuresDim=new ArrayList<String>();
 		if(measures != null && measures.length>0){
 			for(String st :measures){
 				st = UTF8.cnvUTF8(st);
 				String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
 				measuresDim.add(dim);
	 			
 				measureIds+=st.substring(st.indexOf('}')+1);
	 		}
 		}

//		visualReport1Form.setSelectedColumns(UTF8.cnvUTF8(NVL.getString(visualReport1Form.getSelectedColumns())));
//		visualReport1Form.setSelectedFilters(UTF8.cnvUTF8(NVL.getString(visualReport1Form.getSelectedFilters())));
//		visualReport1Form.setSelectedMeasures(UTF8.cnvUTF8(NVL.getString(visualReport1Form.getSelectedMeasures())));
//		visualReport1Form.setSelectedRows(UTF8.cnvUTF8(NVL.getString(visualReport1Form.getSelectedRows())));
		
		String query = srv.createVisualQuery(measureIds, rowIds,columnIds, filterIds);

		return query;
	}
}