/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package aip.niopdc.sellbi.struts.action.visual;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import aip.common.AIPBaseDeleteParam;
import aip.common.AIPDefaultParam;
import aip.common.AIPException;
import aip.common.report.ReportDetailENT;
import aip.common.report.ReportENT;
import aip.common.report.ReportForSaveParam;
import aip.common.report.ReportInterface;
import aip.common.report.ReportLST;
import aip.common.report.ReportLSTParam;
import aip.common.visualreport.VisualReportDTO;
import aip.jpivot.AIPPivotParam;
import aip.niopdc.sellbi.service.visual.VisualReportSRV;
import aip.niopdc.sellbi.struts.SellRemoteManager;
import aip.niopdc.sellbi.struts.form.visual.VisualReportForm;
import aip.util.NVL;
import aip.util.UTF8;

/** 
 * MyEclipse Struts
 * Creation date: 06-02-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="showNavigation" path="/layout/navigation.jsp"
 */
public class VisualReportAction extends Action {
	
	public static void main(String[] args) {
		//String s = "abcdefg";
		//System.out.println(s.substring(0,s.length()-1));
//		String arr[] = AIPUtil.splitString(",[زمان].[سال-ماه].[سال].%26[1388].%26[5],[زمان].[سال-ماه].[سال].%26[1388].%26[3],,,,,[زمان].[سال-ماه].[سال].%26[1388].%26[1],,[زمان].[سال-ماه].[سال].%26[1387],", ",");
//		for(int i=0;i<arr.length;i++)
//			System.out.println(arr[i]);
		
		VisualReportAction a = new VisualReportAction();
		//String q = a.createQuery(request);
		String st = "{[زمان].[سال-فصل-ماه]},,[زمان].[سال-فصل-ماه].[سال].%26[1387],,,[زمان].[سال-فصل-ماه].[سال].%26[1388],,,[زمان].[سال-فصل-ماه].[سال].%26[1387],";
		String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
		System.out.println(dim);
		String rowIds=st.substring(st.indexOf('}')+1);
		System.out.println(rowIds);
		System.out.println("[زمان].[سال-فصل-ماه].[سال].&[1387]".replace(".", ":"));
		st = "[زمان]_[سال-فصل-ماه]_[سال]_%26[1387]_1";
		System.out.println(st.indexOf("_1"));
	}
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) {
		VisualReportForm visualReportForm = (VisualReportForm)form;
		//VisualReportSRV srv = new VisualReportSRV();
		
		String reqCode = NVL.getString(request.getParameter("reqCode"));
		System.out.println("reqCode="+reqCode);
		
		request.setAttribute("selectedRowNames", UTF8.cnvUTF8( request.getParameter("selectedRowNames") ) );
		request.setAttribute("selectedColumnNames", UTF8.cnvUTF8( request.getParameter("selectedColumnNames") ) );
		request.setAttribute("selectedFilterNames", UTF8.cnvUTF8( request.getParameter("selectedFilterNames") ) );
		request.setAttribute("selectedMeasureNames", UTF8.cnvUTF8( request.getParameter("selectedMeasureNames") ) );
		request.setAttribute("selectedRows", UTF8.cnvUTF8( request.getParameter("selectedRows") ) );
		request.setAttribute("selectedColumns", UTF8.cnvUTF8( request.getParameter("selectedColumns") ) );
		request.setAttribute("selectedFilters", UTF8.cnvUTF8( request.getParameter("selectedFilters") ) );
		request.setAttribute("selectedMeasures", UTF8.cnvUTF8( request.getParameter("selectedMeasures") ) );
		
 		String[] rows = convertUTF8(request.getParameterValues("selectedRowsIds"));
 		String[] columns = convertUTF8(request.getParameterValues("selectedColumnsIds"));
 		String[] filters = convertUTF8(request.getParameterValues("selectedFiltersIds"));
 		String[] measures = convertUTF8(request.getParameterValues("selectedMeasuresIds"));

 		
 		 
 		
		if ("deleteIds".equalsIgnoreCase(reqCode)|| "delete".equalsIgnoreCase(reqCode)) {
			AIPBaseDeleteParam param = getAIPBaseDeleteParam(request);
			getDAO().deleteReport(param);
		}else if ("edit".equalsIgnoreCase(reqCode)) {
			AIPDefaultParam param = getAIPDefaultParam(request);
			visualReportForm.setReportENT(getDAO().getReportENT(param));
			
			List<ReportDetailENT> list = visualReportForm.getReportENT().getReportDetailENTs();
			for(int i=0;i<list.size();i++){
				if(list.get(i).getType().equalsIgnoreCase("Row")){
					visualReportForm.setSelectedRows(NVL.getString(visualReportForm.getSelectedRows())+NVL.getString(list.get(i).getSelectedMembers()));
				}
				if(list.get(i).getType().equalsIgnoreCase("Column")){
					visualReportForm.setSelectedColumns(NVL.getString(visualReportForm.getSelectedColumns())+NVL.getString(list.get(i).getSelectedMembers()));
				}
				if(list.get(i).getType().equalsIgnoreCase("Filter")){
					visualReportForm.setSelectedFilters(NVL.getString(visualReportForm.getSelectedFilters())+NVL.getString(list.get(i).getSelectedMembers()));
				}
				if(list.get(i).getType().equalsIgnoreCase("Measure")){
					visualReportForm.setSelectedMeasures(NVL.getString(visualReportForm.getSelectedMeasures())+NVL.getString(list.get(i).getSelectedMembers()));
				}
			}
			request.setAttribute("visualReportForm", visualReportForm);
			return mapping.findForward("edit");
		}else if ("save".equalsIgnoreCase(reqCode)) {
			//VisualReportDTO dto = visualReportForm.getVisualReportDTO();
			//UTF8.makeObjUTF8(dto);

			//dto = srv.saveVisualReport(dto,rows,columns,filters,measures);
			ReportENT ent = visualReportForm.getReportENT();
			UTF8.makeObjUTF8(ent);
			ReportForSaveParam param = new ReportForSaveParam();
			param.setRows(rows);
			param.setColumns(columns);
			param.setFilters(filters);
			param.setMeasures(measures);
			param.setParameters(UTF8.cnvUTF8(request.getParameter("parameters")));
			param.setReportENT(ent);
			try {
				ent = getDAO().saveReport(param);
			} catch (AIPException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			//visualReportForm.setVisualReportDTO(dto);
			visualReportForm.setReportENT(ent);
			visualReportForm.setSelectedRows(UTF8.cnvUTF8(visualReportForm.getSelectedRows()));
			visualReportForm.setSelectedColumns(UTF8.cnvUTF8(visualReportForm.getSelectedColumns()));
			visualReportForm.setSelectedFilters(UTF8.cnvUTF8(visualReportForm.getSelectedFilters()));
			visualReportForm.setSelectedMeasures(UTF8.cnvUTF8(visualReportForm.getSelectedMeasures()));
			request.setAttribute("visualReportForm", visualReportForm);
			return mapping.findForward("edit");
		}else if ("new".equalsIgnoreCase(reqCode)) {
			request.setAttribute("visualReportForm", visualReportForm);
			return mapping.findForward("edit");
		}else if("execute".equalsIgnoreCase(reqCode)){
			try {
				VisualReportDTO dto = visualReportForm.getVisualReportDTO();
				UTF8.makeObjUTF8(dto);
				
				
				String query = getDAO().createVisualQuery(rows,columns,filters,measures);
				AIPPivotParam param = new AIPPivotParam();
				param.setFormAction("pivotview.jsp");
				param.setMdxQuery(query);
				System.out.println("VisualReportAction.execute()");
				
				param.setQueryName(visualReportForm.getReportENT().getReportName());
				param.setLoader("visualreport.do?reqCode=return&reportId="+visualReportForm.getReportENT().getId()+/*"&visualQuery="+query+*/"&queryName="+param.getQueryName()+"&isPublic="+visualReportForm.getReportENT().getIsPublic());
				request.getSession().setAttribute("AIPPivotParam",param);
				
				response.sendRedirect("pivotview.jsp?reqCode=refresh");
				return null;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}else if ("return".equalsIgnoreCase(reqCode)) {
			int reportId = NVL.getInt(request.getParameter("reportId"));
			AIPDefaultParam param = getAIPDefaultParam(request);

			visualReportForm.setReportENT(getDAO().getReportENT(param));
			visualReportForm.getVisualReportDTO().setQuery(UTF8.cnvUTF8(request.getParameter("visualQuery")));
			visualReportForm.getVisualReportDTO().setQueryName(UTF8.cnvUTF8(request.getParameter("queryName")));
			visualReportForm.getReportENT().setIsPublic(NVL.getBool(request.getParameter("isPublic")));
			request.setAttribute("visualReportForm", visualReportForm);
			return mapping.findForward("edit");
		}else if("execute2".equalsIgnoreCase(reqCode)){
			try {
				AIPDefaultParam param2 = getAIPDefaultParam(request);
				visualReportForm.setReportENT(getDAO().getReportENT(param2));
;
				//UTF8.makeObjUTF8(dto);
				
				
				String query = getDAO().createVisualQuery(rows,columns,filters,measures);
				AIPPivotParam param = new AIPPivotParam();
				param.setFormAction("pivotview.jsp");
				param.setMdxQuery(query);
				System.out.println("VisualReportAction.execute()");
				
				param.setQueryName(visualReportForm.getReportENT().getReportName());
				param.setLoader("visualreport.do?reqCode=return&reportId="+visualReportForm.getReportENT().getId()+/*"&visualQuery="+query+*/"&queryName="+param.getQueryName()+"&isPublic="+visualReportForm.getReportENT().getIsPublic());
				request.getSession().setAttribute("AIPPivotParam",param);
				
				response.sendRedirect("pivotview.jsp?reqCode=refresh");
				return null;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		ReportLSTParam param = new ReportLSTParam();
		param.setPageSize(10);
		ReportLST lst =	getDAO().getVisualReports(param);
		visualReportForm.setReportLST(lst);

		request.setAttribute("visualReportForm", visualReportForm);
		return mapping.findForward("list");
	}
	
//	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) {
//		VisualReportForm visualReportForm = (VisualReportForm)form;
//		VisualReportSRV srv = new VisualReportSRV();
//		
//		String reqCode = NVL.getString(request.getParameter("reqCode"));
//		System.out.println("reqCode="+reqCode);
//		
//		request.setAttribute("selectedRowNames", UTF8.cnvUTF8( request.getParameter("selectedRowNames") ) );
//		request.setAttribute("selectedColumnNames", UTF8.cnvUTF8( request.getParameter("selectedColumnNames") ) );
//		request.setAttribute("selectedFilterNames", UTF8.cnvUTF8( request.getParameter("selectedFilterNames") ) );
//		request.setAttribute("selectedMeasureNames", UTF8.cnvUTF8( request.getParameter("selectedMeasureNames") ) );
//		request.setAttribute("selectedRows", UTF8.cnvUTF8( request.getParameter("selectedRows") ) );
//		request.setAttribute("selectedColumns", UTF8.cnvUTF8( request.getParameter("selectedColumns") ) );
//		request.setAttribute("selectedFilters", UTF8.cnvUTF8( request.getParameter("selectedFilters") ) );
//		request.setAttribute("selectedMeasures", UTF8.cnvUTF8( request.getParameter("selectedMeasures") ) );
//		
// 		String[] rows = convertUTF8(request.getParameterValues("selectedRowsIds"));
// 		String[] columns = convertUTF8(request.getParameterValues("selectedColumnsIds"));
// 		String[] filters = convertUTF8(request.getParameterValues("selectedFiltersIds"));
// 		String[] measures = convertUTF8(request.getParameterValues("selectedMeasuresIds"));
//
// 		
// 		 
// 		
//		if ("deleteIds".equalsIgnoreCase(reqCode)) {
//			srv.deleteVisualReport(NVL.getString(request.getParameter("selectedIds")));
//		}if("delete".equalsIgnoreCase(reqCode)){
//			srv.deleteVisualReport(NVL.getInt(request.getParameter("reportId")));
//		}else if ("edit".equalsIgnoreCase(reqCode)) {
//			int reportId = NVL.getInt(request.getParameter("reportId"));
//			visualReportForm.setVisualReportDTO(srv.getVisualReportDTO(reportId));
//			
//			List<VisualReportDetailDTO> list = visualReportForm.getVisualReportDTO().getChildren();
//			for(int i=0;i<list.size();i++){
//				if(list.get(i).getType().equalsIgnoreCase("Row")){
//					visualReportForm.setSelectedRows(NVL.getString(visualReportForm.getSelectedRows())+NVL.getString(list.get(i).getSelectedMembers()));
//				}
//				if(list.get(i).getType().equalsIgnoreCase("Column")){
//					visualReportForm.setSelectedColumns(NVL.getString(visualReportForm.getSelectedColumns())+NVL.getString(list.get(i).getSelectedMembers()));
//				}
//				if(list.get(i).getType().equalsIgnoreCase("Filter")){
//					visualReportForm.setSelectedFilters(NVL.getString(visualReportForm.getSelectedFilters())+NVL.getString(list.get(i).getSelectedMembers()));
//				}
//				if(list.get(i).getType().equalsIgnoreCase("Measure")){
//					visualReportForm.setSelectedMeasures(NVL.getString(visualReportForm.getSelectedMeasures())+NVL.getString(list.get(i).getSelectedMembers()));
//				}
//			}
//			request.setAttribute("visualReportForm", visualReportForm);
//			return mapping.findForward("edit");
//		}else if ("save".equalsIgnoreCase(reqCode)) {
//			VisualReportDTO dto = visualReportForm.getVisualReportDTO();
//			UTF8.makeObjUTF8(dto);
//
////			String query = createQuery(request);
////			query = query.replaceAll("%26","&");
////			dto.setQuery(query);
//			
//			dto = srv.saveVisualReport(dto,rows,columns,filters,measures);
//			
//			visualReportForm.setVisualReportDTO(dto);
//			visualReportForm.setSelectedRows(UTF8.cnvUTF8(visualReportForm.getSelectedRows()));
//			visualReportForm.setSelectedColumns(UTF8.cnvUTF8(visualReportForm.getSelectedColumns()));
//			visualReportForm.setSelectedFilters(UTF8.cnvUTF8(visualReportForm.getSelectedFilters()));
//			visualReportForm.setSelectedMeasures(UTF8.cnvUTF8(visualReportForm.getSelectedMeasures()));
//			request.setAttribute("visualReportForm", visualReportForm);
//			return mapping.findForward("edit");
//		}else if ("new".equalsIgnoreCase(reqCode)) {
//			request.setAttribute("visualReportForm", visualReportForm);
//			return mapping.findForward("edit");
//		}else if("execute".equalsIgnoreCase(reqCode)){
//			try {
//				VisualReportDTO dto = visualReportForm.getVisualReportDTO();
//				UTF8.makeObjUTF8(dto);
//				
//				String query = srv.createVisualQuery(rows,columns,filters,measures);
//				AIPPivotParam param = new AIPPivotParam();
//				param.setFormAction("pivotview.jsp");
//				param.setMdxQuery(query);
//				System.out.println("VisualReportAction.execute()");
//				
//				param.setQueryName(visualReportForm.getVisualReportDTO().getQueryName());
//				param.setLoader("visualreport.do?reqCode=return&reportId="+visualReportForm.getVisualReportDTO().getId()+/*"&visualQuery="+query+*/"&queryName="+param.getQueryName()+"&isPublic="+visualReportForm.getReportENT().getIsPublic());
//				request.getSession().setAttribute("AIPPivotParam",param);
//				
//				response.sendRedirect("pivotview.jsp?reqCode=refresh");
//				return null;
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}else if ("return".equalsIgnoreCase(reqCode)) {
//			int reportId = NVL.getInt(request.getParameter("reportId"));
//			visualReportForm.setVisualReportDTO(srv.getVisualReportDTO(reportId));
//			visualReportForm.getVisualReportDTO().setQuery(UTF8.cnvUTF8(request.getParameter("visualQuery")));
//			visualReportForm.getVisualReportDTO().setQueryName(UTF8.cnvUTF8(request.getParameter("queryName")));
//			visualReportForm.getReportENT().setIsPublic(NVL.getBool(request.getParameter("isPublic")));
////			visualReportForm.setDimensionTreeLST(srv.getDimensionTreeLST(""));
//			request.setAttribute("visualReportForm", visualReportForm);
//			return mapping.findForward("edit");
////		}else if("member".equalsIgnoreCase(reqCode)){
////			try{
////				String _User ="";
////				String _Password="";
////				String id=UTF8.cnvUTF8( request.getParameter("id") );
////				String text="", url,oid="";
////				PrintWriter out = response.getWriter();
////				String report = NVL.getString(request.getParameter("reporttype"));
////				XMLA_SOAP xmla_soap=new XMLA_SOAP(AIPOlap.getDataSourceURI(),_User,_Password);
////				
////				List<XMLA_OlapItem> lstMembers=null;
////				System.out.println("Members2Action.execute():parent="+id);
////				lstMembers=xmla_soap.discoverMemTree(AIPOlap.getCatalog(),AIPOlap.getCubeName(), id,1);
////				DimensionMember dm = null;
////				ArrayList<DimensionMember> rows = new ArrayList<DimensionMember>();
////				for (XMLA_OlapItem member : lstMembers) {
////					oid = member.getUniqueName().replace("&", "%26");;
////					text = member.getCaption();
////					url = "members2.do?reqCode=member&id="+oid+"&parent="+id+(report.equalsIgnoreCase("visual") ? "&reporttype=visual" : "");
////					System.out.println("Members2Action.execute():url="+url);
////					AIPTree.appendTreeNode(out, text, url, "dbclickCreateQuery(reportQuery,this);",oid);
////					
////					rows.add(new DimensionMember(member.getCaption(),oid));
////				}
////				request.setAttribute("rows", rows);
////			} catch (IOException e) {
////				// TODO Auto-generated catch block
////				e.printStackTrace();
////			} catch (OlapException e) {
////				// TODO Auto-generated catch block
////				e.printStackTrace();
////			}
////
//		}
//		VisualReportLST lst =	srv.getVisualReportDTOs();
//		visualReportForm.setVisualReportLST(lst);
//
//		request.setAttribute("visualReportForm", visualReportForm);
//		return mapping.findForward("list");
//	}
	
	private AIPDefaultParam getAIPDefaultParam(HttpServletRequest request) {
		AIPDefaultParam param = new AIPDefaultParam();
		param.setId(NVL.getInt(request.getParameter("reportId")));
		return param;
	}

	private AIPBaseDeleteParam getAIPBaseDeleteParam(HttpServletRequest request) {
		AIPBaseDeleteParam param = new AIPBaseDeleteParam();
		param.setIds(NVL.getString(request.getParameter("selectedIds")));
		param.setId(NVL.getInt(request.getParameter("reportId")));
//		param.setWebUser(request.getRemoteUser());
		return param;
	}

	private String[] convertUTF8(String[] arr) {
		if(arr != null && arr.length>0){
			for(int i=0;i<arr.length;i++){
				arr[i] = UTF8.cnvUTF8(arr[i]);
			}
		}
		return arr;
	}

//	private String createQuery(HttpServletRequest request){
//		VisualReportSRV srv = new VisualReportSRV();
//		//String selectedRows = NVL.getString(request.getParameterValues("selectedRows"));
// 		String[] rows = request.getParameterValues("selectedRows");
// 		String[] columns = request.getParameterValues("columnsSelected");
// 		String[] filters = request.getParameterValues("filtersSelected");
// 		String[] measures = request.getParameterValues("measuresSelected");
////		System.out.println("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL");
//// 		if(request.getParameterValues("rowsSelected") != null&& request.getParameterValues("rowsSelected").length!=0)
////	 		for(String st:request.getParameterValues("rowsSelected")){
////	 			System.out.println(UTF8.cnvUTF8(st));
////	 		}
//// 		System.out.println("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL");
//
// 		/*
// 		 * get rowIds & dim
// 		 */
// 		String rowIds = "";
// 		List<String> rowsDim=new ArrayList<String>();
// 		if(rows != null && rows.length>0){
// 			for(String st :rows){
// 				st = UTF8.cnvUTF8(st);
// 				String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
// 				rowsDim.add(dim);
//	 			
//	 			rowIds+=st.substring(st.indexOf('}')+1);
//	 		}
// 		}
// 		
// 		/*
// 		 * 
// 		 */
// 		String columnIds = "";
// 		List<String> columnsDim=new ArrayList<String>();
// 		if(columns != null && columns.length>0){
// 			for(String st :columns){
// 				st = UTF8.cnvUTF8(st);
// 				String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
// 				columnsDim.add(dim);
//	 			
// 				columnIds+=st.substring(st.indexOf('}')+1);
//	 		}
// 		}
//
// 		/*
// 		 * 
// 		 */
// 		String filterIds = "";
// 		List<String> filtersDim=new ArrayList<String>();
// 		if(filters != null && filters.length>0){
// 			for(String st :filters){
// 				st = UTF8.cnvUTF8(st);
// 				String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
// 				filtersDim.add(dim);
//	 			
// 				filterIds+=st.substring(st.indexOf('}')+1);
//	 		}
// 		}
//
// 		/*
// 		 * 
// 		 */
// 		String measureIds = "";
// 		List<String> measuresDim=new ArrayList<String>();
// 		if(measures != null && measures.length>0){
// 			for(String st :measures){
// 				st = UTF8.cnvUTF8(st);
// 				String dim = st.substring(st.indexOf('{'), st.indexOf('}')+1);
// 				measuresDim.add(dim);
//	 			
// 				measureIds+=st.substring(st.indexOf('}')+1);
//	 		}
// 		}
//
////		visualReportForm.setSelectedColumns(UTF8.cnvUTF8(NVL.getString(visualReportForm.getSelectedColumns())));
////		visualReportForm.setSelectedFilters(UTF8.cnvUTF8(NVL.getString(visualReportForm.getSelectedFilters())));
////		visualReportForm.setSelectedMeasures(UTF8.cnvUTF8(NVL.getString(visualReportForm.getSelectedMeasures())));
////		visualReportForm.setSelectedRows(UTF8.cnvUTF8(NVL.getString(visualReportForm.getSelectedRows())));
//		
//		String query = srv.createVisualQuery(measureIds, rowIds,columnIds, filterIds);
//
//		return query;
//	}
	
	/**
	 * General Private Methods
	 */
	ReportInterface getDAO() {
		return SellRemoteManager.getReportInterface();
	}

}